// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int             @id @default(autoincrement())
  email     String          @unique
  password  String
  role      Role            @default(ADMIN)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  profile   Profile?
  posts     Post[]
  comments  Comment[]
  like      PostLike?
  likes     CommentLike?
  dislike   PostDislike?
  dislikes  CommentDislike?
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  age       Int?
  address   String?
  phone     Int?
  image     String?
  authorId  Int     @unique
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Post {
  id             Int              @id @default(autoincrement())
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  comments       Comment[]
  likes          PostLike[]
  dislikes       PostDislike[]
  categories     PostToCategory[]
  authorId       Int
  author         User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  CommentDislike CommentDislike[]
}

model Comment {
  id          Int              @id @default(autoincrement())
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  likes       CommentLike[]
  dislikes    CommentDislike[]
  author      User?            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int?
  post        Post?            @relation(fields: [postId], references: [id])
  postId      Int?
}

model Category {
  id        Int              @id @default(autoincrement())
  name      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  posts     PostToCategory[]
}

model PostToCategory {
  postId     Int
  categoryId Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
}

model PostLike {
  id       Int   @id @default(autoincrement())
  post     Post? @relation(fields: [postId], references: [id])
  postId   Int?
  author   User? @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?  @unique
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?     @unique
}

model PostDislike {
  id       Int   @id @default(autoincrement())
  post     Post? @relation(fields: [postId], references: [id])
  postId   Int?
  author   User? @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?  @unique
}

model CommentDislike {
  id        Int      @id @default(autoincrement())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?     @unique
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum LikeType {
  like
  dislike
}
